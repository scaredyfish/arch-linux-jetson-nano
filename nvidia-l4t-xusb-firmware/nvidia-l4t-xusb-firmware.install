post_install() {

	# Copyright (c) 2019-2021, NVIDIA CORPORATION. All rights reserved.
	#
	# Redistribution and use in source and binary forms, with or without
	# modification, are permitted provided that the following conditions
	# are met:
	#  * Redistributions of source code must retain the above copyright
	#    notice, this list of conditions and the following disclaimer.
	#  * Redistributions in binary form must reproduce the above copyright
	#    notice, this list of conditions and the following disclaimer in the
	#    documentation and/or other materials provided with the distribution.
	#  * Neither the name of NVIDIA CORPORATION nor the names of its
	#    contributors may be used to endorse or promote products derived
	#    from this software without specific prior written permission.
	#
	# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
	# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
	# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	# This script runs on target post installation of nvidia-xusb-firmware debian package.

	BOOT_CTRL_CONF="/etc/nv_boot_control.conf"
	OTA_PACKAGE_DIR="/opt/ota_package"
	T186REF_UPDATER="/usr/bin/nv_update_engine"
	T210REF_UPDATER="/usr/bin/l4t_payload_updater_t210"
	UPDATE_CONF="/opt/nvidia/l4t-bootloader-config/nv-l4t-bootloader-config.sh"
	payload_name="xusb_only_payload"
	update_log="${payload_name}.log"

	if [ -e "/opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall" ]; then
    		echo "Pre-installing xusb firmware package, skip flashing"
    		exit 0
	fi

	t186ref_update () {
	    echo "Starting xusb firmware post-install procedure."

	    if [ -x "${T186REF_UPDATER}" ]; then
	        "${T186REF_UPDATER}" --enable-ab > /dev/null
	        if [ -f "${payload_dir}/${payload_name}" ]; then
	            # shellcheck disable=SC2164
	            pushd "${payload_dir}" &> /dev/null
	            # The update engine and payload updater currently only consumes payloads
	            # named "/opt/ota_package/bl_update_payload"
	            cp "${payload_name}" "${OTA_PACKAGE_DIR}"/bl_update_payload
	            "${T186REF_UPDATER}" --install no-reboot &> "${OTA_PACKAGE_DIR}/${update_log}"
	            # shellcheck disable=SC2181
	            if [ $? -ne 0 ]; then
	                echo "ERROR. Procedure for xusb firmware update FAILED."
	                echo "Cannot install package. Exiting..."
	                exit 1
	            fi
	            # shellcheck disable=SC2164
	            popd &> /dev/null
	            echo "Update xusb firmware completed."
	            echo "Reboot the target system for changes to take effect."
	        else
	            echo "ERROR. ${payload_dir}/${payload_name} does not exist."
	            echo "Cannot install package. Exiting..."
	            exit 1
	        fi
	    else
	        echo "ERROR. ${T186REF_UPDATER} is NOT executable, post install script FAILED."
	        echo "Cannot install package. Exiting..."
	        exit 1
	    fi
	}

	t210ref_update () {
	    echo "Starting xusb firmware post-install procedure."

	    if [ -x "${T210REF_UPDATER}" ]; then
	        if [ -f "${payload_dir}/${payload_name}" ]; then
	            # shellcheck disable=SC2164
	            pushd "${payload_dir}" &> /dev/null
	            "${T210REF_UPDATER}" "${payload_dir}/${payload_name}" &> "${OTA_PACKAGE_DIR}/${update_log}"
	            # shellcheck disable=SC2181
	            if [ $? -ne 0 ]; then
	                echo "ERROR. Procedure for xusb firmware update FAILED."
	                echo "Cannot install package. Exiting..."
	                exit 1
	            fi;
	            # shellcheck disable=SC2164
	            popd &> /dev/null
	            echo "Update xusb firmware completed."
	            echo "Reboot the target system for changes to take effect."
	        else
	            echo "ERROR. ${payload_dir}/${payload_name} does not exist."
	            echo "Cannot install package. Exiting..."
	            exit 1
	        fi
	    else
	        echo "ERROR. ${T210REF_UPDATER} is NOT executable, post install script FAILED."
	        echo "Cannot install package. Exiting..."
	        exit 1
	    fi
	}

	t186ref_check_unsupported () {
	    local unsupported_boards=(
	        'jetson-agx-xavier-industrial'
	        'jetson-agx-xavier-industrial-mxn'
	    )
	    # shellcheck disable=SC2155
	    local compatible_spec=$( awk '/COMPATIBLE_SPEC/ {print $2}' "${BOOT_CTRL_CONF}" )

	    for spec in "${unsupported_boards[@]}"; do
	        if [[ ${compatible_spec} == *-${spec}- ]]; then
	            echo "WARNING. xusb firmware update for ${spec} is not supported."
	            return 1
	        fi;
	    done
	    return 0
	}

	if [ ! -r "${BOOT_CTRL_CONF}" ]; then
	    echo "ERROR. Cannot open ${BOOT_CTRL_CONF} for reading."
	    echo "Cannot install package. Exiting..."
	    exit 1
	fi

	"${UPDATE_CONF}" -c

	chipid=$( awk '/TEGRA_CHIPID/ {print $2}' "${BOOT_CTRL_CONF}" )
	payload_dir="${OTA_PACKAGE_DIR}"

	case "${chipid}" in
	    0x18)
	        # T186 doesn't need to update xusb firmware partition.
	        exit 0;
	        ;;
	    0x19)
	        # skip installing BUP on unsupported boards
	        if t186ref_check_unsupported; then
	            payload_dir+="/t19x"
	            t186ref_update
	        fi
	        ;;
	    0x21)
	        payload_dir+="/t21x"
	        t210ref_update
	        ;;
	    *)
	        echo "ERROR. Unrecognized chip ID: ${chipid}."
	        echo "Cannot install xusb firmware package. Exiting..."
	        exit 1
	esac
}

post_upgrade() {
	post_install
}

